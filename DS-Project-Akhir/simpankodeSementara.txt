import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from utils.recommendation import load_data, calculate_item_similarity, get_tfidf_similarity, recommend_wisata

# Path ke file data
DESC_PATH = 'data/descwisata.csv'
RATING_PATH = 'data/ratingwisata.csv'

# Load data
desc_df, rating_df = load_data(DESC_PATH, RATING_PATH)
item_similarity = calculate_item_similarity(rating_df)
tfidf_similarity = get_tfidf_similarity(desc_df)

# Sidebar untuk navigasi
st.sidebar.title("Menu Navigasi")
menu = st.sidebar.radio("Pilih Menu", ["Rekomendasi Wisata", "Daftar Wisata", "Proses Metode"])

# Halaman Rekomendasi Wisata
if menu == "Rekomendasi Wisata":
    st.title("Sistem Rekomendasi Wisata")
    st.write("Rekomendasi ini dibuat menggunakan metode Item-Based Collaborative Filtering dan TF-IDF.")

    # Input form: Pilih hingga 3 tempat wisata
    st.header("Tempat wisata yang pernah Anda kunjungi")
    col1, col2, col3 = st.columns(3)

    # Dropdown input untuk memilih wisata
    selected_wisata_1 = col1.selectbox("Wisata 1", ["Pilih wisata"] + list(desc_df['Nama Wisata'].unique()), key="wisata1")
    selected_wisata_2 = col2.selectbox("Wisata 2", ["Pilih wisata"] + list(desc_df['Nama Wisata'].unique()), key="wisata2")
    selected_wisata_3 = col3.selectbox("Wisata 3", ["Pilih wisata"] + list(desc_df['Nama Wisata'].unique()), key="wisata3")

    # Filter input yang valid
    selected_wisata = [wisata for wisata in [selected_wisata_1, selected_wisata_2, selected_wisata_3] if wisata != "Pilih wisata"]

    # Tombol untuk mendapatkan rekomendasi
    if st.button("Dapatkan Rekomendasi"):
        if not selected_wisata:
            st.warning("Silakan pilih minimal satu tempat wisata yang pernah Anda kunjungi!")
        else:
            # Menggabungkan rekomendasi dari wisata yang dipilih
            combined_recommendations = {}
            for wisata in selected_wisata:
                recommendations = recommend_wisata(item_similarity, tfidf_similarity, wisata, desc_df, top_n=5)
                for rec_wisata, score in recommendations:
                    if rec_wisata in combined_recommendations:
                        combined_recommendations[rec_wisata] += score
                    else:
                        combined_recommendations[rec_wisata] = score

            # Urutkan hasil rekomendasi
            sorted_recommendations = sorted(combined_recommendations.items(), key=lambda x: x[1], reverse=True)

            # Tampilkan rekomendasi
            st.subheader("Rekomendasi wisata untuk Anda:")
            for wisata, score in sorted_recommendations[:5]:
                st.write(f"- {wisata} (Similarity Score: {score:.2f})")

# Halaman Daftar Wisata
elif menu == "Daftar Wisata":
    st.title("Daftar Wisata")
    st.write("Berikut adalah daftar lengkap tempat wisata beserta atributnya:")
    st.dataframe(desc_df)

# Halaman Proses Metode
elif menu == "Proses Metode":
    st.title("Proses Metode yang Digunakan")
    st.write("Visualisasi metode **Item-Based Collaborative Filtering** dan **TF-IDF**:")

    # Visualisasi Heatmap Cosine Similarity (IBCF)
    st.subheader("1. Cosine Similarity Antar Wisata (Item-Based Collaborative Filtering)")
    plt.figure(figsize=(10, 8))
    sns.heatmap(item_similarity, annot=False, cmap="Blues", xticklabels=desc_df['Nama Wisata'], yticklabels=desc_df['Nama Wisata'])
    st.pyplot(plt)

    # Menampilkan Kata Penting dari TF-IDF
    st.subheader("2. Kata-Kata Penting Berdasarkan Deskripsi Fasilitas (TF-IDF)")
    from sklearn.feature_extraction.text import TfidfVectorizer

    # Hitung TF-IDF
    tfidf = TfidfVectorizer(stop_words='english', max_features=10)
    tfidf_matrix = tfidf.fit_transform(desc_df['FASILITAS'].fillna(''))
    feature_names = tfidf.get_feature_names_out()

    # Tampilkan Kata Penting
    st.write("Berikut adalah 10 kata paling penting dari kolom **FASILITAS** berdasarkan TF-IDF:")
    for i, word in enumerate(feature_names, 1):
        st.write(f"{i}. {word}")

    # Informasi Singkat tentang Metode
    st.subheader("3. Penjelasan Singkat Metode")
    st.write("""
    - **Item-Based Collaborative Filtering**: Menghitung kemiripan antar wisata berdasarkan rating pengguna menggunakan *Cosine Similarity*.
    - **TF-IDF (Term Frequency-Inverse Document Frequency)**: Menganalisis kata-kata penting pada deskripsi fasilitas wisata untuk mengetahui wisata yang relevan berdasarkan teks.
    """)

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
